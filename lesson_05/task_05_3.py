# 3. Есть два списка: tutors - имена учеников, groups - названия их классов. Необходимо
# реализовать генератор или функцию-генератор, возвращающий кортежи вида '(<tutor>, <group>)'.
# Техническое задание
#
# Функция (или генератор) должна работать со списками любой длины.
# Количество генерируемых кортежей не должно быть больше длины списка tutors.
# Если в списке groups меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в
# виде: '(<tutor>, None)', например: '('Станислав', None)'
# Если в списке tutors меньше элементов, чем в списке groups, то смотри пункт 2.
# Генератор возвращает кортежи указанного вида.
# Доказать, что вы создали именно генератор. Вывести все его значения на экран.
# Не используйте в этом задании функции zip и zip_longest.
# Не меняйте исходные списки tutors и groups и не создавайте новых списков.
# Подтвердите работоспособность(выведите в консоль результаты) для обоих вариантов: groups меньше
# tutors и tutors меньше groups.
# Примечание:
#
# Сделать эту задачу через функцию-генератор проще. Если сделали, попробуйте сделать именно через
# генераторное выражение, т.е. «в одну строку».
# Примеры/Тесты:
#
#
# tutors = [
#     'Иван', 'Анастасия', 'Петр', 'Сергей',
#     'Дмитрий', 'Борис', 'Елена'
# ]
# groups = [
#     '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
# ]
#
# Результат, где учеников меньше
#
#
# Ученики: ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# Классы: ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
# Тип объекта: <class 'generator'>
# Все значения генератора:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ('Петр', '9Б')
# ('Сергей', '9В')
# ('Дмитрий', '8Б')
# ('Борис', '10А')
# ('Елена', '10Б')
#
# Результат, где учеников больше
#
#
# Ученики: ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# Классы: ['9А', '7В', '9Б', '9В']
# Тип объекта: <class 'generator'>
# Все значения генератора:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ('Петр', '9Б')
# ('Сергей', '9В')
# ('Дмитрий', None)
# ('Борис', None)
# ('Елена', None)


tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
groups = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']

# Кирилл, прокомментиройте, пожалуйста, почему 2 варианта кода не сработали?
# Почему не включалось условие else, когда искомого элемента не находилось?

# tuple_gen = (tutor for tutor in tutors, (group for group in groups if group else None)
#
# def tuple_gen(tutors, groups):
#     for tutor in tutors:
#         pair = ()
#         if groups[tutors.index(tutor)]:
#             pair = (tutor, groups[tutors.index(tutor)])
#         else:
#             pair = (tutor, None)
#         yield pair

# def tuple_gen(tutors, groups):
#     for i in range(len(tutors)):
#         pair = ()
#         if groups[i]:
#             pair = (tutors[i], groups[i])
#         else:
#             pair = (tutors[i], None)
#         yield pair

# def tuple_gen(tutors, groups):
#     for tutor in tutors:
#         if groups[tutors.index(tutor)]:
#             yield (tutor, groups[tutors.index(tutor)])
#         else:
#             yield (tutor, None)


def tuple_gen(tutors, groups):
    for i in range(len(tutors)):
        pair = ()
        if i < len(groups):
            pair = (tutors[i], groups[i])
        else:
            pair = (tutors[i], None)
        yield pair


rez = tuple_gen(tutors, groups)

print('Результат, где учеников меньше')
print(f'Ученики: {tutors}')
print(f'Классы: {groups}')
print(type(rez))

for i in range(len(tutors)):
    print(next(rez))

tutors2 = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
groups2 = ['9А', '7В', '9Б', '9В']

print()
print()

rez = tuple_gen(tutors2, groups2)
print('Результат, где учеников больше')
print(f'Ученики: {tutors2}')
print(f'Классы: {groups2}')
print(type(rez))

for i in range(len(tutors2)):
    print(next(rez))