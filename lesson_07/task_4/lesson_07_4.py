# 4. Написать скрипт, который для заданной папки выводит статистику размеров файлов
# Техническое задание
#
# Директорию с файлами 'some_data' можно скачать из прикрепленных к уроку файлов.
# Результат формируется в виде словаря
# ключи — верхняя граница размера файла.
# значения — общее количество файлов (в том числе и в подпапках), размер которых не превышает этой границы, но
# больше предыдущей (начинаем с 0)
# Границы диапазонов размеров считаем фиксированными данными - пусть будет кратна 10, как в примере.
# Программа должна легко модифицироваться под другие границы диапазонов.
# Программа должна легко модифицироваться под увеличение количества диапазонов. Т.е. если диапазонов станет 150
# шутк - не надо будет переписывать всю программу.
# Формат вывода результата:
#
#
# {
#   100: 15,
#   1000: 3,
#   10000: 7,
#   100000: 2
# }
#
# Примечание:
#
# В примере: Тут 15 файлов размером не более 100 байт; 3 файла больше 100 и не больше 1000 байт...


from os import scandir, stat
from math import log10


rez_dict = {}

folder = 'some_data'

size_list = [item.stat().st_size for item in scandir(folder)]
names = [item.name for item in scandir(folder)]
max_size = max(size_list)
lim = int(log10(max_size)) + 1
for degree in range(lim + 1):
    rez_dict[10 ** degree] = 0
for size in size_list:
    if size <= 1:
        rez_dict[1] += 1
    else:
        gap = int(log10(size)) + 1
        rez_dict[10 ** gap] += 1


# print(names)
# print(size_list, '\n', len(size_list), max_size)
# print(rez_dict)

print('{')
for k, v in rez_dict.items():
    print('\t', f'{k}: {v},')
print('}')

# Вариант, работающий с файлами в одной папке. Границы автоматическ устанавливаются кратные 10, в зависимости
# от размера вложенных файлов